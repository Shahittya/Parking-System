/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parkingsystem;

import javax.swing.JOptionPane;

/**
 *
 * @author Walton
 */
public class AdminMenuFrame extends javax.swing.JFrame {
    private AdminUser adminUser;

    public AdminMenuFrame(AdminUser adminUser) {
        this.adminUser = adminUser; // Store the AdminUser object
        initComponents(); // Initialize GUI components
        setTitle("Admin Menu - " + adminUser.getUserName()); 
    }
public AdminMenuFrame() {
        JOptionPane.showMessageDialog(this, "No user data provided. Redirecting to login.", "Error", JOptionPane.ERROR_MESSAGE);
        this.dispose();
        new LoginFrame().setVisible(true); // Redirect to LoginFrame
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        issuepenalty = new javax.swing.JButton();
        updateparkingslots = new javax.swing.JButton();
        searchvehicle = new javax.swing.JButton();
        searchuser = new javax.swing.JButton();
        ViewHourlyParkingUsage = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        ParkingSlotAvailability = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Dashboard");
        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("ADMIN DASHBOARD");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        issuepenalty.setBackground(new java.awt.Color(153, 255, 255));
        issuepenalty.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        issuepenalty.setForeground(new java.awt.Color(0, 102, 102));
        issuepenalty.setText("Issue Penalty");
        issuepenalty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issuepenaltyMouseClicked(evt);
            }
        });

        updateparkingslots.setBackground(new java.awt.Color(153, 255, 255));
        updateparkingslots.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        updateparkingslots.setForeground(new java.awt.Color(0, 102, 102));
        updateparkingslots.setText("Update Parking Slots");
        updateparkingslots.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateparkingslotsMouseClicked(evt);
            }
        });

        searchvehicle.setBackground(new java.awt.Color(153, 255, 255));
        searchvehicle.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        searchvehicle.setForeground(new java.awt.Color(0, 102, 102));
        searchvehicle.setText("Search Vehicle");
        searchvehicle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchvehicleMouseClicked(evt);
            }
        });

        searchuser.setBackground(new java.awt.Color(153, 255, 255));
        searchuser.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        searchuser.setForeground(new java.awt.Color(0, 102, 102));
        searchuser.setText("Search User");
        searchuser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchuserMouseClicked(evt);
            }
        });

        ViewHourlyParkingUsage.setBackground(new java.awt.Color(153, 255, 255));
        ViewHourlyParkingUsage.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ViewHourlyParkingUsage.setForeground(new java.awt.Color(0, 102, 102));
        ViewHourlyParkingUsage.setText("View Hourly Parking Usage");
        ViewHourlyParkingUsage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewHourlyParkingUsageMouseClicked(evt);
            }
        });

        logout.setBackground(new java.awt.Color(153, 255, 255));
        logout.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        logout.setForeground(new java.awt.Color(0, 102, 102));
        logout.setText("Logout");
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
        });

        ParkingSlotAvailability.setBackground(new java.awt.Color(153, 255, 255));
        ParkingSlotAvailability.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ParkingSlotAvailability.setForeground(new java.awt.Color(0, 102, 102));
        ParkingSlotAvailability.setText("Parking Slot Availability");
        ParkingSlotAvailability.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ParkingSlotAvailabilityMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jLabel1)
                .addContainerGap(175, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(updateparkingslots, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(issuepenalty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchvehicle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchuser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ViewHourlyParkingUsage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ParkingSlotAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(229, 229, 229))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(issuepenalty, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateparkingslots, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(searchvehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchuser, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(ViewHourlyParkingUsage, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(ParkingSlotAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
    MainMenuFrame menuframe= new MainMenuFrame();
    menuframe.setVisible(true); 
    this.dispose();
    }//GEN-LAST:event_logoutMouseClicked

    private void ViewHourlyParkingUsageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ViewHourlyParkingUsageMouseClicked
     HourlyParkingUsageFrame HourlyParkingUsage= new HourlyParkingUsageFrame(adminUser);
    HourlyParkingUsage.setVisible(true); 
    this.dispose();
    }//GEN-LAST:event_ViewHourlyParkingUsageMouseClicked

    private void ParkingSlotAvailabilityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ParkingSlotAvailabilityMouseClicked
    parkingSlotAvailability slotavailable= new parkingSlotAvailability(adminUser);
    slotavailable.setVisible(true); 
    this.dispose(); 
    }//GEN-LAST:event_ParkingSlotAvailabilityMouseClicked

    private void searchvehicleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchvehicleMouseClicked
    String licenseNumber = JOptionPane.showInputDialog(this, "Enter Vehicle Registration Number:", 
                                                       "Search Vehicle", JOptionPane.QUESTION_MESSAGE);

    if (licenseNumber == null || licenseNumber.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vehicle registration number cannot be empty.", 
                                      "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Call the searchVehicle method from AdminUser
        String vehicleDetails = adminUser.searchVehicle(licenseNumber);

        // Display the results
        JOptionPane.showMessageDialog(this, vehicleDetails, "Search Results", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "An error occurred while searching for the vehicle: " + e.getMessage(),
                                      "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_searchvehicleMouseClicked

    private void searchuserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchuserMouseClicked
         // Prompt the admin for the username to search
    String userName = JOptionPane.showInputDialog(this, "Enter Username to Search:");

    if (userName == null || userName.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Username cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Call the searchUser method and get the result
    String result = adminUser.searchUser(userName);

    // Display the result in a popup dialog
    JOptionPane.showMessageDialog(this, result, "Search User Result", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_searchuserMouseClicked

    private void issuepenaltyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issuepenaltyMouseClicked
         try {
        // Prompt admin for necessary details
        String clientUsername = JOptionPane.showInputDialog(this, "Enter Client Username:");
        if (clientUsername == null || clientUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Search for the client by username
        ClientUser client = adminUser.searchClientByUsername(clientUsername);
        if (client == null) {
            JOptionPane.showMessageDialog(this, "Client not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String reason = JOptionPane.showInputDialog(this, "Enter Penalty Reason:");
        if (reason == null || reason.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Reason cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String amountInput = JOptionPane.showInputDialog(this, "Enter Penalty Amount:");
        if (amountInput == null || amountInput.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Amount cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double amount = Double.parseDouble(amountInput);
        String receipt = adminUser.issuePenalty(client, reason, amount);

        JOptionPane.showMessageDialog(this, receipt, "Penalty Receipt", JOptionPane.INFORMATION_MESSAGE);

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid amount. Please enter a valid number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_issuepenaltyMouseClicked

    private void updateparkingslotsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateparkingslotsMouseClicked
        try {
    
        String input = JOptionPane.showInputDialog(this, "Enter the new total number of slots:", "Update Parking Slots", JOptionPane.QUESTION_MESSAGE);

        if (input == null || input.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Input cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int newTotalSlots = Integer.parseInt(input);

        if (newTotalSlots <= 0) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number greater than 0.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ParkingLot parkingLot = ParkingSystem.getParkingLot(); 

        String resultMessage = adminUser.updateTotalSlots(parkingLot, newTotalSlots);

        JOptionPane.showMessageDialog(this, resultMessage, "Update Slots", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "An error occurred while updating slots: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_updateparkingslotsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminMenuFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ParkingSlotAvailability;
    private javax.swing.JButton ViewHourlyParkingUsage;
    private javax.swing.JButton issuepenalty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton logout;
    private javax.swing.JButton searchuser;
    private javax.swing.JButton searchvehicle;
    private javax.swing.JButton updateparkingslots;
    // End of variables declaration//GEN-END:variables
}
