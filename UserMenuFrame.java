/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parkingsystem;
import javax.swing.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
/**
 *
 * @author Walton
 */
public class UserMenuFrame extends javax.swing.JFrame {

private ClientUser clientUser;

    public UserMenuFrame(ClientUser clientUser) {
        this.clientUser = clientUser; // Store the ClientUser object
    initComponents(); // Initialize GUI components
    setTitle("User Menu - " + clientUser.getUserName()); // Set the title dynamically
    JLabel welcomeLabel = new JLabel("Welcome, " + clientUser.getUserName());
    add(welcomeLabel); // Add the welcome label to the frame
    }
public UserMenuFrame() {
        JOptionPane.showMessageDialog(this, "No user data provided. Redirecting to login.", "Error", JOptionPane.ERROR_MESSAGE);
        this.dispose();
        new LoginFrame().setVisible(true); // Redirect to LoginFrame
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomelabel = new javax.swing.JLabel();
        bookslot = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        freeslot = new javax.swing.JButton();
        addvehicle = new javax.swing.JButton();
        viewprofile = new javax.swing.JButton();
        showpenalty = new javax.swing.JButton();
        payment = new javax.swing.JButton();
        logput = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("user dashboard");
        setBackground(new java.awt.Color(51, 255, 255));
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        bookslot.setBackground(new java.awt.Color(153, 255, 255));
        bookslot.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        bookslot.setText("Book A Slot");
        bookslot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookslotMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("User DashBoard");

        freeslot.setBackground(new java.awt.Color(153, 255, 255));
        freeslot.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        freeslot.setText("Free A Slot");
        freeslot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freeslotMouseClicked(evt);
            }
        });

        addvehicle.setBackground(new java.awt.Color(153, 255, 255));
        addvehicle.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        addvehicle.setText("Add Vehicle");
        addvehicle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addvehicleMouseClicked(evt);
            }
        });

        viewprofile.setBackground(new java.awt.Color(153, 255, 255));
        viewprofile.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        viewprofile.setText("View Profile");
        viewprofile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewprofileMouseClicked(evt);
            }
        });

        showpenalty.setBackground(new java.awt.Color(153, 255, 255));
        showpenalty.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        showpenalty.setText("Show Penalty");
        showpenalty.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showpenaltyMouseClicked(evt);
            }
        });

        payment.setBackground(new java.awt.Color(153, 255, 255));
        payment.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        payment.setText("Payment");
        payment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentMouseClicked(evt);
            }
        });

        logput.setBackground(new java.awt.Color(153, 255, 255));
        logput.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        logput.setText("Logout");
        logput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logputMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(224, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(welcomelabel)
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(186, 186, 186))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(logput, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(bookslot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(freeslot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addvehicle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(viewprofile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(showpenalty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(payment, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(214, 214, 214))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomelabel)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addComponent(bookslot, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(freeslot, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addvehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewprofile, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(showpenalty, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(payment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(logput, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
         JLabel welcomeLabel = new JLabel("Welcome, " + clientUser.getUserName());
    add(welcomeLabel);
    }//GEN-LAST:event_formPropertyChange

    private void logputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logputMouseClicked
    MainMenuFrame menuframe= new MainMenuFrame();
    menuframe.setVisible(true); 
    this.dispose();
    }//GEN-LAST:event_logputMouseClicked

    private void bookslotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookslotMouseClicked
       // Check if the user already has a booked slot
    if (clientUser.getSlotId() != -1) {
        JOptionPane.showMessageDialog(this, "You already have a booked slot with ID: " + clientUser.getSlotId(),
                "Slot Already Booked", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Check if the user has any registered vehicles
    if (clientUser.getVehicle().isEmpty()) {
        JOptionPane.showMessageDialog(this, "No vehicles registered. Please add a vehicle first.",
                "No Vehicles", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Display a dialog for the user to select a vehicle
    String[] vehicleOptions = clientUser.getVehicle().stream()
            .map(vehicle -> vehicle.getLicenseNumber() + " (" + vehicle.getColor() + ")")
            .toArray(String[]::new);

    String selectedVehicle = (String) JOptionPane.showInputDialog(
            this,
            "Select a vehicle for booking:",
            "Vehicle Selection",
            JOptionPane.QUESTION_MESSAGE,
            null,
            vehicleOptions,
            vehicleOptions[0]);

    if (selectedVehicle == null) {
        return; // User canceled the dialog
    }

    // Find the selected vehicle from the user's list
    Vehicle vehicleToBook = clientUser.getVehicle().stream()
            .filter(vehicle -> selectedVehicle.startsWith(vehicle.getLicenseNumber()))
            .findFirst()
            .orElse(null);

    if (vehicleToBook == null) {
        JOptionPane.showMessageDialog(this, "Invalid vehicle selection.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Attempt to book the slot
    try {
        ParkingLot parkingLot = ParkingSystem.getParkingLot(); // method to get the parking lot
        boolean isBooked = clientUser.bookSlot(parkingLot, vehicleToBook);

        if (isBooked) {
            JOptionPane.showMessageDialog(this, "Slot booked successfully for vehicle: " + vehicleToBook.getLicenseNumber(),
                    "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No available slots. Please try again later.",
                    "Booking Failed", JOptionPane.WARNING_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error occurred while booking the slot: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_bookslotMouseClicked

    private void freeslotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freeslotMouseClicked
            
    if (clientUser.getSlotId() == -1) {
        JOptionPane.showMessageDialog(this, "You don't have any booked slot to free.",
                "No Slot Booked", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Attempt to free the slot
    try {
        ParkingLot parkingLot = ParkingSystem.getParkingLot(); // Assuming a method to get the parking lot
        clientUser.freeSlot(parkingLot);

        // Display success message and reset the slot ID
        JOptionPane.showMessageDialog(this, "Slot freed successfully!",
                "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error occurred while freeing the slot: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_freeslotMouseClicked

    private void viewprofileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewprofileMouseClicked
     ViewProfile viewProfileFrame = new ViewProfile(clientUser);
    viewProfileFrame.setVisible(true);
    this.dispose();
    }//GEN-LAST:event_viewprofileMouseClicked

    private void showpenaltyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showpenaltyMouseClicked
     Showpenalty penalty = new Showpenalty(clientUser);
    penalty.setVisible(true);
    this.dispose();
    }//GEN-LAST:event_showpenaltyMouseClicked

    private void paymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentMouseClicked
        
     PaymentFrame payment = new PaymentFrame(clientUser);
    payment.setVisible(true);
    this.dispose();
        
        
         
    }//GEN-LAST:event_paymentMouseClicked

    private void addvehicleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addvehicleMouseClicked
  try {
        // Prompt the user for vehicle details
        String licenseNumber = JOptionPane.showInputDialog(this, "Enter Vehicle License Number:");
        if (licenseNumber == null || licenseNumber.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "License Number cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String color = JOptionPane.showInputDialog(this, "Enter Vehicle Color:");
        if (color == null || color.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Color cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String[] vehicleTypes = {"Car", "Bike"};
        String type = (String) JOptionPane.showInputDialog(this, "Select Vehicle Type:", "Vehicle Type",
                JOptionPane.QUESTION_MESSAGE, null, vehicleTypes, vehicleTypes[0]);

        if (type == null) {
            return; // User canceled the dialog
        }

        String model = JOptionPane.showInputDialog(this, "Enter Vehicle Model:");
        if (model == null || model.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Model cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Vehicle vehicle;
        if (type.equalsIgnoreCase("Car")) {
            String fuelType = JOptionPane.showInputDialog(this, "Enter Fuel Type:");
            if (fuelType == null || fuelType.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Fuel Type cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
          
            vehicle = new Car(0, licenseNumber, color, model, fuelType);
        } else if (type.equalsIgnoreCase("Bike")) {
            String ccInput = JOptionPane.showInputDialog(this, "Enter CC:");
            if (ccInput == null || ccInput.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "CC cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            double cc = Double.parseDouble(ccInput);
           
            vehicle = new Bike(0, licenseNumber, color, model, cc);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid vehicle type. Please select 'Car' or 'Bike'.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Add the vehicle to the user's list
        clientUser.addVehicle(vehicle);

        JOptionPane.showMessageDialog(this, "Vehicle added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input for numeric fields. Please enter valid numbers.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "An error occurred while adding the vehicle: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_addvehicleMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserMenuFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addvehicle;
    private javax.swing.JButton bookslot;
    private javax.swing.JButton freeslot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton logput;
    private javax.swing.JButton payment;
    private javax.swing.JButton showpenalty;
    private javax.swing.JButton viewprofile;
    private javax.swing.JLabel welcomelabel;
    // End of variables declaration//GEN-END:variables
}
